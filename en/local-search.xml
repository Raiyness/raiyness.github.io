<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Monotonic_Stack</title>
    <link href="/en/2024/09/05/Monotonic_Stack/"/>
    <url>/en/2024/09/05/Monotonic_Stack/</url>
    
    <content type="html"><![CDATA[<p>Monotonic Stack is a special type of stack.</p><span id="more"></span><h2 id="What-is-a-Monotonic-Stack"><a href="#What-is-a-Monotonic-Stack" class="headerlink" title="What is a Monotonic Stack?"></a>What is a <strong>Monotonic Stack</strong>?</h2><p>A monotonic stack is a special type of stack data structure in which the elements always maintain a monotonic increasing or decreasing order. When inserting a new element, the stack pops out all the elements at the top that do not satisfy the monotonicity, and then the new element is pushed onto the stack.</p><p><img src="https://raw.githubusercontent.com/Raiyness/picgo/master/rayPicGo/Monotonic_Stack.gif"></p><h2 id="Types-of-Monotonic-Stacks"><a href="#Types-of-Monotonic-Stacks" class="headerlink" title="Types of Monotonic Stacks"></a>Types of Monotonic Stacks</h2><h3 id="Monotonic-Increasing-Stack"><a href="#Monotonic-Increasing-Stack" class="headerlink" title="Monotonic Increasing Stack"></a>Monotonic Increasing Stack</h3><p>In a monotonic increasing stack, each element is larger than the one below it. When a new element is pushed onto the stack, if the top element of the stack is greater than or equal to the new element, the top element is popped out until the top element is smaller than the new element or the stack is empty.</p><h4 id="Pseudocode"><a href="#Pseudocode" class="headerlink" title="Pseudocode"></a>Pseudocode</h4><div class="pseudocode">\begin{algorithm}\caption{Monotonic Stack for Finding the Next Greater Element}\begin{algorithmic}  \Procedure{NextGreaterElement}{$nums$}    \State $stack \gets \emptyset$ \Comment{Initialize an empty stack}    \State $result \gets$ array of size $|nums|$ filled with $-1$    \Comment{Initialize result array with -1}    <pre><code class="hljs">\For&#123;$i \gets 0$ \To $|nums| - 1$&#125;  \While&#123;$stack$ is not empty and $nums[stack.top()] &lt; nums[i]$&#125;    \State $index \gets stack.pop()$    \State $result[index] \gets nums[i]$  \EndWhile  \State $stack.push(i)$\EndFor\State \Return $result$</code></pre><p>  \EndProcedure<br>\end{algorithmic}<br>\end{algorithm}</p></div><h4 id="Java-Implement"><a href="#Java-Implement" class="headerlink" title="Java Implement"></a>Java Implement</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> java.util.Stack;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MonotonicStack</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] nextGreaterElements(<span class="hljs-type">int</span>[] nums) &#123;<br>        <span class="hljs-type">int</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length];<br>        Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        <br>        <span class="hljs-comment">// Initialize result with -1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            result[i] = -<span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">while</span> (!stack.isEmpty() &amp;&amp; nums[stack.peek()] &lt; nums[i]) &#123;<br>                result[stack.pop()] = nums[i];<br>            &#125;<br>            stack.push(i);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MonotonicStack</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MonotonicStack</span>();<br>        <span class="hljs-type">int</span>[] nums = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-type">int</span>[] result = ms.nextGreaterElements(nums);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> val : result) &#123;<br>            System.out.print(val + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br>&lt;/div&gt;<br><br>### Monotonic Decreasing Stack<br><br>In a monotonic decreasing stack, each element is smaller than the one below it. When a <span class="hljs-keyword">new</span> <span class="hljs-title class_">element</span> is pushed onto the stack, <span class="hljs-keyword">if</span> the top element is smaller than or equal to the <span class="hljs-keyword">new</span> <span class="hljs-title class_">element</span>, the top element is popped out until the top element is greater than the <span class="hljs-keyword">new</span> <span class="hljs-title class_">element</span> or the stack is empty.<br><br>#### Pseudocode<br><br>&lt;div class=<span class="hljs-string">&quot;pseudocode&quot;</span>&gt;<br>\begin&#123;algorithm&#125;<br>\caption&#123;Monotonic Decreasing Stack <span class="hljs-keyword">for</span> Sliding Window Maximum&#125;<br>\begin&#123;algorithmic&#125;<br>  \Procedure&#123;SlidingWindowMax&#125;&#123;$nums, k$&#125;<br>    \State $deque \gets \emptyset$ \Comment&#123;Initialize an empty deque&#125;<br>    \State $result \gets$ array of size $|nums| - k + <span class="hljs-number">1</span>$<br><br>    \For&#123;$i \gets <span class="hljs-number">0</span>$ \To $|nums| - <span class="hljs-number">1</span>$&#125;<br>      \Comment&#123;Remove elements out of window&#125;<br>      \If&#123;$deque$ is not empty and $deque.front() \leq i - k$&#125;<br>        \State $deque.pop\_front()$<br>      \EndIf<br><br>      \Comment&#123;Maintain decreasing order in the deque&#125;<br>      \While&#123;$deque$ is not empty and $nums[deque.back()] &lt; nums[i]$&#125;<br>        \State $deque.pop\_back()$<br>      \EndWhile<br><br>      \State $deque.push\_back(i)$<br><br>      \Comment&#123;Store the current window maximum&#125;<br>      \If&#123;$i \geq k - <span class="hljs-number">1</span>$&#125;<br>        \State $result[i - k + <span class="hljs-number">1</span>] \gets nums[deque.front()]$<br>      \EndIf<br>    \EndFor<br><br>    \State \Return $result$<br>  \EndProcedure<br>\end&#123;algorithmic&#125;<br>\end&#123;algorithm&#125;<br></code></pre></td></tr></table></figure><h4 id="Java-Implement-1"><a href="#Java-Implement-1" class="headerlink" title="Java Implement"></a>Java Implement</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> java.util.Deque;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SlidingWindowMax</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] maxSlidingWindow(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k) &#123;<br>        <span class="hljs-keyword">if</span> (nums == <span class="hljs-literal">null</span> || nums.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-type">int</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n - k + <span class="hljs-number">1</span>];<br>        Deque&lt;Integer&gt; deque = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-comment">// Remove elements not in the sliding window</span><br>            <span class="hljs-keyword">if</span> (!deque.isEmpty() &amp;&amp; deque.peekFirst() &lt; i - k + <span class="hljs-number">1</span>) &#123;<br>                deque.pollFirst();<br>            &#125;<br><br>            <span class="hljs-comment">// Remove elements smaller than the current number from the back</span><br>            <span class="hljs-keyword">while</span> (!deque.isEmpty() &amp;&amp; nums[deque.peekLast()] &lt; nums[i]) &#123;<br>                deque.pollLast();<br>            &#125;<br><br>            deque.offerLast(i);<br><br>            <span class="hljs-comment">// The front of the deque is the max element of the window</span><br>            <span class="hljs-keyword">if</span> (i &gt;= k - <span class="hljs-number">1</span>) &#123;<br>                result[i - k + <span class="hljs-number">1</span>] = nums[deque.peekFirst()];<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SlidingWindowMax</span> <span class="hljs-variable">swm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SlidingWindowMax</span>();<br>        <span class="hljs-type">int</span>[] nums = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>        <span class="hljs-type">int</span>[] result = swm.maxSlidingWindow(nums, k);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> val : result) &#123;<br>            System.out.print(val + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Applications-of-Monotonic-Stack"><a href="#Applications-of-Monotonic-Stack" class="headerlink" title="Applications of Monotonic Stack"></a>Applications of Monotonic Stack</h2><ul><li><strong>Next Greater&#x2F;Smaller Element</strong>: Finding the next larger&#x2F;smaller element to the right (or left) of each element in an array. For example, given an array, a monotonic stack can help find the next greater element for each element.</li><li><strong>Sliding Window Maximum</strong>: Using a monotonic decreasing stack to maintain the maximum value within a sliding window.</li><li><strong>Trapping Rain Water</strong>: Using a monotonic decreasing stack to efficiently calculate how much water can be trapped between pillars.</li><li><strong>Largest Rectangle in Histogram</strong>: Using a monotonic increasing stack to find the maximum rectangle area that can be formed by each bar in a histogram.</li></ul><h2 id="Advantages-and-Disadvantages-of-Monotonic-Stack"><a href="#Advantages-and-Disadvantages-of-Monotonic-Stack" class="headerlink" title="Advantages and Disadvantages of Monotonic Stack"></a>Advantages and Disadvantages of Monotonic Stack</h2><h3 id="Advantages"><a href="#Advantages" class="headerlink" title="Advantages"></a>Advantages</h3><ul><li><strong>Efficiency</strong>: The monotonic stack reduces the time complexity to $O(n)$ in many problems, as each element is pushed and popped from the stack only once. This is a significant advantage for certain problems.</li><li><strong>Space Saving</strong>: Compared to brute-force methods that explore all possible combinations, the monotonic stack only requires linear space.</li></ul><h3 id="Disadvantages"><a href="#Disadvantages" class="headerlink" title="Disadvantages"></a>Disadvantages</h3><ul><li><strong>Limited Use Cases</strong>: Monotonic stacks are mainly suitable for problems that involve sequential data processing and require updating data states based on the current element.</li><li><strong>Additional Space Overhead</strong>: Although it reduces time complexity, the monotonic stack requires extra space for the stack itself, which may not be suitable for memory-constrained environments.</li></ul>]]></content>
    
    
    <categories>
      
      <category>Computer Science</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
      <tag>Stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Water</title>
    <link href="/en/2024/06/11/New/"/>
    <url>/en/2024/06/11/New/</url>
    
    <content type="html"><![CDATA[<p>这部分是正文的摘要。</p><span id="more"></span><p>–</p><div class="note note-secondary">            <p><strong>Metadata</strong><br>domain:: [[LeetCode]]<br>difficulty:: medium<br>type:: Array, Two Pointers, Greedy</p>          </div><h2 id="❓-Question"><a href="#❓-Question" class="headerlink" title="❓ Question"></a>❓ Question</h2><blockquote><p>You are given an integer array <code>height</code> of length <code>n</code>. There are n vertical lines drawn such that the two endpoints of the <code>ith</code> line are <code>(i, 0)</code> and <code>(i, height[i])</code>.</p><p>Find two lines that together with the x-axis form a container, such that the container contains the most water.</p><p>Return the maximum amount of water a container can store.</p><p><strong>Notice</strong> that you may not slant the container.</p></blockquote><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><div class="note note-secondary">            <p><strong>Example 1</strong></p><p>![[container_with_most_water_example.png]]<br><strong>Input:</strong> <code>height = [1,8,6,2,5,4,8,3,7]</code><br><strong>Output:</strong> <code>49</code><br><strong>Explanation:</strong> The above vertical lines are represented by array <code>[1,8,6,2,5,4,8,3,7]</code>. In this case, the max area of water (blue section) the container can contain is 49.</p>          </div><div class="note note-secondary">            <p><strong>Example 2</strong><br><strong>Input:</strong> <code>height = [1,1]</code><br><strong>Output:</strong> <code>1</code></p>          </div><h3 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h3><ul><li><code>n == height.length</code></li><li><code>2 &lt;= n &lt;= 105</code></li><li><code>0 &lt;= height[i] &lt;= 104</code></li></ul><h2 id="✅-My-Answer"><a href="#✅-My-Answer" class="headerlink" title="✅ My Answer"></a>✅ My Answer</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxArea</span><span class="hljs-params">(<span class="hljs-type">int</span>[] height)</span> &#123;  <br>    <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <br>    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <br>    <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> height.length - <span class="hljs-number">1</span>;  <br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123;  <br>        <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Math.min(height[left], height[right]) * (right - left);  <br>        max = Math.max(max, current);  <br>        <span class="hljs-keyword">if</span> (height[left] &lt; height[right]) &#123;  <br>            left++;  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            right--;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> max;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="🔍-Approach"><a href="#🔍-Approach" class="headerlink" title="🔍 Approach"></a>🔍 Approach</h2><h2 id="🏆-Conclusion"><a href="#🏆-Conclusion" class="headerlink" title="🏆 Conclusion"></a>🏆 Conclusion</h2>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>🟡Record🖊️</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>testtest</title>
    <link href="/en/2023/05/23/testtest/"/>
    <url>/en/2023/05/23/testtest/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Article Sample</title>
    <link href="/en/1999/11/30/20230519/"/>
    <url>/en/1999/11/30/20230519/</url>
    
    <content type="html"><![CDATA[<p>This is an abstract of the main content.</p><span id="more"></span><h1 id="Heading-1"><a href="#Heading-1" class="headerlink" title="Heading 1"></a>Heading 1</h1><h2 id="Heading-2"><a href="#Heading-2" class="headerlink" title="Heading 2"></a>Heading 2</h2><h3 id="Heading-3"><a href="#Heading-3" class="headerlink" title="Heading 3"></a>Heading 3</h3><h4 id="Heading-4"><a href="#Heading-4" class="headerlink" title="Heading 4"></a>Heading 4</h4><h5 id="Heading-5"><a href="#Heading-5" class="headerlink" title="Heading 5"></a>Heading 5</h5><h6 id="Heading-6"><a href="#Heading-6" class="headerlink" title="Heading 6"></a>Heading 6</h6><p>Here is the main content.</p><h3 id="Separator"><a href="#Separator" class="headerlink" title="Separator"></a>Separator</h3><hr><h3 id="Tag-Page"><a href="#Tag-Page" class="headerlink" title="Tag Page"></a>Tag Page</h3><h4 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h4><div class="note note-success">            <p>There is a note: <code>success</code></p>          </div><div class="note note-secondary">            <p>There is a note: <code>secondary</code></p>          </div><div class="note note-primary">            <p>There is a note: <code>primary</code></p>          </div><div class="note note-danger">            <p>There is a note: <code>danger</code></p>          </div><div class="note note-warning">            <p>There is a note: <code>warning</code></p>          </div><div class="note note-info">            <p>There is a note: <code>info</code></p>          </div><div class="note note-light">            <p>There is a note: <code>light</code></p>          </div><h4 id="Inline-Note"><a href="#Inline-Note" class="headerlink" title="Inline Note"></a>Inline Note</h4><p>There is an inline note: <span class="label label-primary">text</span></p><h3 id="Code-Block"><a href="#Code-Block" class="headerlink" title="Code Block"></a>Code Block</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello world!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LaTeX-Mathematical-Formulas"><a href="#LaTeX-Mathematical-Formulas" class="headerlink" title="LaTeX Mathematical Formulas:"></a>LaTeX Mathematical Formulas:</h3><h4 id="Inline-Formula"><a href="#Inline-Formula" class="headerlink" title="Inline Formula"></a>Inline Formula</h4><p>This is a inline formula: $a&#x3D;b+c$</p><h4 id="Display-Formula"><a href="#Display-Formula" class="headerlink" title="Display Formula"></a>Display Formula</h4><p>$$<br>E&#x3D;mc^2<br>$$</p><h3 id="Checkboxes"><a href="#Checkboxes" class="headerlink" title="Checkboxes"></a>Checkboxes</h3>            <input type="checkbox" disabled checked="checked">This is a checkbox          <div>            <input type="checkbox" disabled >Normal example          </div><div>            <input type="checkbox" disabled checked="checked">Default selected          </div>            <input type="checkbox" disabled >Inline example           no line break after the checkbox<input type="checkbox" disabled > It is also possible to pass only one argument and write the text afterwards (this does not support external linking)<h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><a class="btn" href="url"  title="title" target="_blank">text</a>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>🟡Record🖊️</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
